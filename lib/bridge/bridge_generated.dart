// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.62.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

import 'dart:ffi' as ffi;

part 'bridge_generated.freezed.dart';

abstract class Native {
  Future<String> rustBridgeSayHello({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRustBridgeSayHelloConstMeta;

  Future<void> initDb({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitDbConstMeta;

  Future<ScreenParams> getScreenSize({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetScreenSizeConstMeta;

  Future<void> createAllDirectory({required String s, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateAllDirectoryConstMeta;

  Future<int> newPaper({required String s, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewPaperConstMeta;

  Future<List<WallPaper>> getAllPapers({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetAllPapersConstMeta;

  Future<List<GalleryOrWallpaper>> getAllItems({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetAllItemsConstMeta;

  Future<WallPaper?> getPaperById({required int i, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetPaperByIdConstMeta;

  Future<int> deletePaperById({required int i, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDeletePaperByIdConstMeta;

  Future<int> setIsFavById({required int i, required int isFav, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetIsFavByIdConstMeta;

  Future<String> getCurrentWallPaper({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetCurrentWallPaperConstMeta;

  Future<int> setWallPaper({required String s, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetWallPaperConstMeta;

  Future<void> setJsonPath({required String s, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetJsonPathConstMeta;

  Future<void> setDbPath({required String s, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetDbPathConstMeta;

  Future<void> setGalleryId({required int id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetGalleryIdConstMeta;

  Future<int> createNewGallery({required String s, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateNewGalleryConstMeta;

  Future<int> getParentId({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetParentIdConstMeta;

  Future<void> deleteGalleryDirectlyById({required int i, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDeleteGalleryDirectlyByIdConstMeta;

  Future<void> deleteGalleryKeepChildrenById({required int i, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDeleteGalleryKeepChildrenByIdConstMeta;

  Future<String> downloadFile(
      {required String url, required String savePath, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDownloadFileConstMeta;

  Future<List<GalleryOrWallpaper>> getChildrenById(
      {required int i, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetChildrenByIdConstMeta;
}

class Gallery {
  final int galleryId;
  final int createAt;
  final int isDeleted;
  final String galleryName;

  Gallery({
    required this.galleryId,
    required this.createAt,
    required this.isDeleted,
    required this.galleryName,
  });
}

@freezed
class GalleryOrWallpaper with _$GalleryOrWallpaper {
  const factory GalleryOrWallpaper.gallery(
    Gallery field0,
  ) = GalleryOrWallpaper_Gallery;
  const factory GalleryOrWallpaper.wallPaper(
    WallPaper field0,
  ) = GalleryOrWallpaper_WallPaper;
}

class ScreenParams {
  final int width;
  final int height;

  ScreenParams({
    required this.width,
    required this.height,
  });
}

class WallPaper {
  final int wallPaperId;
  final String filePath;
  final String fileHash;
  final int createAt;
  final int isDeleted;
  final int isFav;

  WallPaper({
    required this.wallPaperId,
    required this.filePath,
    required this.fileHash,
    required this.createAt,
    required this.isDeleted,
    required this.isFav,
  });
}

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) =>
      NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) =>
      NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Future<String> rustBridgeSayHello({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_rust_bridge_say_hello(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kRustBridgeSayHelloConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRustBridgeSayHelloConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "rust_bridge_say_hello",
        argNames: [],
      );

  Future<void> initDb({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init_db(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kInitDbConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitDbConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_db",
        argNames: [],
      );

  Future<ScreenParams> getScreenSize({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_screen_size(port_),
      parseSuccessData: _wire2api_screen_params,
      constMeta: kGetScreenSizeConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetScreenSizeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_screen_size",
        argNames: [],
      );

  Future<void> createAllDirectory({required String s, dynamic hint}) {
    var arg0 = _platform.api2wire_String(s);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_create_all_directory(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kCreateAllDirectoryConstMeta,
      argValues: [s],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateAllDirectoryConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_all_directory",
        argNames: ["s"],
      );

  Future<int> newPaper({required String s, dynamic hint}) {
    var arg0 = _platform.api2wire_String(s);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_new_paper(port_, arg0),
      parseSuccessData: _wire2api_i64,
      constMeta: kNewPaperConstMeta,
      argValues: [s],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewPaperConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new_paper",
        argNames: ["s"],
      );

  Future<List<WallPaper>> getAllPapers({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_all_papers(port_),
      parseSuccessData: _wire2api_list_wall_paper,
      constMeta: kGetAllPapersConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetAllPapersConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_all_papers",
        argNames: [],
      );

  Future<List<GalleryOrWallpaper>> getAllItems({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_all_items(port_),
      parseSuccessData: _wire2api_list_gallery_or_wallpaper,
      constMeta: kGetAllItemsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetAllItemsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_all_items",
        argNames: [],
      );

  Future<WallPaper?> getPaperById({required int i, dynamic hint}) {
    var arg0 = _platform.api2wire_i64(i);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_paper_by_id(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_wall_paper,
      constMeta: kGetPaperByIdConstMeta,
      argValues: [i],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetPaperByIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_paper_by_id",
        argNames: ["i"],
      );

  Future<int> deletePaperById({required int i, dynamic hint}) {
    var arg0 = _platform.api2wire_i64(i);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_delete_paper_by_id(port_, arg0),
      parseSuccessData: _wire2api_i64,
      constMeta: kDeletePaperByIdConstMeta,
      argValues: [i],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDeletePaperByIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "delete_paper_by_id",
        argNames: ["i"],
      );

  Future<int> setIsFavById({required int i, required int isFav, dynamic hint}) {
    var arg0 = _platform.api2wire_i64(i);
    var arg1 = _platform.api2wire_i64(isFav);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_set_is_fav_by_id(port_, arg0, arg1),
      parseSuccessData: _wire2api_i64,
      constMeta: kSetIsFavByIdConstMeta,
      argValues: [i, isFav],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetIsFavByIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_is_fav_by_id",
        argNames: ["i", "isFav"],
      );

  Future<String> getCurrentWallPaper({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_current_wall_paper(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kGetCurrentWallPaperConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetCurrentWallPaperConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_current_wall_paper",
        argNames: [],
      );

  Future<int> setWallPaper({required String s, dynamic hint}) {
    var arg0 = _platform.api2wire_String(s);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_wall_paper(port_, arg0),
      parseSuccessData: _wire2api_i64,
      constMeta: kSetWallPaperConstMeta,
      argValues: [s],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetWallPaperConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_wall_paper",
        argNames: ["s"],
      );

  Future<void> setJsonPath({required String s, dynamic hint}) {
    var arg0 = _platform.api2wire_String(s);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_json_path(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSetJsonPathConstMeta,
      argValues: [s],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetJsonPathConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_json_path",
        argNames: ["s"],
      );

  Future<void> setDbPath({required String s, dynamic hint}) {
    var arg0 = _platform.api2wire_String(s);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_db_path(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSetDbPathConstMeta,
      argValues: [s],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetDbPathConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_db_path",
        argNames: ["s"],
      );

  Future<void> setGalleryId({required int id, dynamic hint}) {
    var arg0 = _platform.api2wire_i64(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_gallery_id(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSetGalleryIdConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetGalleryIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_gallery_id",
        argNames: ["id"],
      );

  Future<int> createNewGallery({required String s, dynamic hint}) {
    var arg0 = _platform.api2wire_String(s);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_new_gallery(port_, arg0),
      parseSuccessData: _wire2api_i64,
      constMeta: kCreateNewGalleryConstMeta,
      argValues: [s],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateNewGalleryConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_new_gallery",
        argNames: ["s"],
      );

  Future<int> getParentId({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_parent_id(port_),
      parseSuccessData: _wire2api_i64,
      constMeta: kGetParentIdConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetParentIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_parent_id",
        argNames: [],
      );

  Future<void> deleteGalleryDirectlyById({required int i, dynamic hint}) {
    var arg0 = _platform.api2wire_i64(i);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_delete_gallery_directly_by_id(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kDeleteGalleryDirectlyByIdConstMeta,
      argValues: [i],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDeleteGalleryDirectlyByIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "delete_gallery_directly_by_id",
        argNames: ["i"],
      );

  Future<void> deleteGalleryKeepChildrenById({required int i, dynamic hint}) {
    var arg0 = _platform.api2wire_i64(i);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_delete_gallery_keep_children_by_id(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kDeleteGalleryKeepChildrenByIdConstMeta,
      argValues: [i],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDeleteGalleryKeepChildrenByIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "delete_gallery_keep_children_by_id",
        argNames: ["i"],
      );

  Future<String> downloadFile(
      {required String url, required String savePath, dynamic hint}) {
    var arg0 = _platform.api2wire_String(url);
    var arg1 = _platform.api2wire_String(savePath);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_download_file(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kDownloadFileConstMeta,
      argValues: [url, savePath],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDownloadFileConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "download_file",
        argNames: ["url", "savePath"],
      );

  Future<List<GalleryOrWallpaper>> getChildrenById(
      {required int i, dynamic hint}) {
    var arg0 = _platform.api2wire_i64(i);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_children_by_id(port_, arg0),
      parseSuccessData: _wire2api_list_gallery_or_wallpaper,
      constMeta: kGetChildrenByIdConstMeta,
      argValues: [i],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetChildrenByIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_children_by_id",
        argNames: ["i"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  Gallery _wire2api_box_autoadd_gallery(dynamic raw) {
    return _wire2api_gallery(raw);
  }

  WallPaper _wire2api_box_autoadd_wall_paper(dynamic raw) {
    return _wire2api_wall_paper(raw);
  }

  Gallery _wire2api_gallery(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Gallery(
      galleryId: _wire2api_i64(arr[0]),
      createAt: _wire2api_i64(arr[1]),
      isDeleted: _wire2api_i64(arr[2]),
      galleryName: _wire2api_String(arr[3]),
    );
  }

  GalleryOrWallpaper _wire2api_gallery_or_wallpaper(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return GalleryOrWallpaper_Gallery(
          _wire2api_box_autoadd_gallery(raw[1]),
        );
      case 1:
        return GalleryOrWallpaper_WallPaper(
          _wire2api_box_autoadd_wall_paper(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  List<GalleryOrWallpaper> _wire2api_list_gallery_or_wallpaper(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_gallery_or_wallpaper).toList();
  }

  List<WallPaper> _wire2api_list_wall_paper(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_wall_paper).toList();
  }

  WallPaper? _wire2api_opt_box_autoadd_wall_paper(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_wall_paper(raw);
  }

  ScreenParams _wire2api_screen_params(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ScreenParams(
      width: _wire2api_i32(arr[0]),
      height: _wire2api_i32(arr[1]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  WallPaper _wire2api_wall_paper(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return WallPaper(
      wallPaperId: _wire2api_i64(arr[0]),
      filePath: _wire2api_String(arr[1]),
      fileHash: _wire2api_String(arr[2]),
      createAt: _wire2api_i64(arr[3]),
      isDeleted: _wire2api_i64(arr[4]),
      isFav: _wire2api_i64(arr[5]),
    );
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  int api2wire_i64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(uintptr_t)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<uintptr_t Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_rust_bridge_say_hello(
    int port_,
  ) {
    return _wire_rust_bridge_say_hello(
      port_,
    );
  }

  late final _wire_rust_bridge_say_helloPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_rust_bridge_say_hello');
  late final _wire_rust_bridge_say_hello =
      _wire_rust_bridge_say_helloPtr.asFunction<void Function(int)>();

  void wire_init_db(
    int port_,
  ) {
    return _wire_init_db(
      port_,
    );
  }

  late final _wire_init_dbPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_init_db');
  late final _wire_init_db = _wire_init_dbPtr.asFunction<void Function(int)>();

  void wire_get_screen_size(
    int port_,
  ) {
    return _wire_get_screen_size(
      port_,
    );
  }

  late final _wire_get_screen_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_screen_size');
  late final _wire_get_screen_size =
      _wire_get_screen_sizePtr.asFunction<void Function(int)>();

  void wire_create_all_directory(
    int port_,
    ffi.Pointer<wire_uint_8_list> s,
  ) {
    return _wire_create_all_directory(
      port_,
      s,
    );
  }

  late final _wire_create_all_directoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_create_all_directory');
  late final _wire_create_all_directory = _wire_create_all_directoryPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_new_paper(
    int port_,
    ffi.Pointer<wire_uint_8_list> s,
  ) {
    return _wire_new_paper(
      port_,
      s,
    );
  }

  late final _wire_new_paperPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_new_paper');
  late final _wire_new_paper = _wire_new_paperPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_all_papers(
    int port_,
  ) {
    return _wire_get_all_papers(
      port_,
    );
  }

  late final _wire_get_all_papersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_all_papers');
  late final _wire_get_all_papers =
      _wire_get_all_papersPtr.asFunction<void Function(int)>();

  void wire_get_all_items(
    int port_,
  ) {
    return _wire_get_all_items(
      port_,
    );
  }

  late final _wire_get_all_itemsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_all_items');
  late final _wire_get_all_items =
      _wire_get_all_itemsPtr.asFunction<void Function(int)>();

  void wire_get_paper_by_id(
    int port_,
    int i,
  ) {
    return _wire_get_paper_by_id(
      port_,
      i,
    );
  }

  late final _wire_get_paper_by_idPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int64)>>(
          'wire_get_paper_by_id');
  late final _wire_get_paper_by_id =
      _wire_get_paper_by_idPtr.asFunction<void Function(int, int)>();

  void wire_delete_paper_by_id(
    int port_,
    int i,
  ) {
    return _wire_delete_paper_by_id(
      port_,
      i,
    );
  }

  late final _wire_delete_paper_by_idPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int64)>>(
          'wire_delete_paper_by_id');
  late final _wire_delete_paper_by_id =
      _wire_delete_paper_by_idPtr.asFunction<void Function(int, int)>();

  void wire_set_is_fav_by_id(
    int port_,
    int i,
    int is_fav,
  ) {
    return _wire_set_is_fav_by_id(
      port_,
      i,
      is_fav,
    );
  }

  late final _wire_set_is_fav_by_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Int64, ffi.Int64)>>('wire_set_is_fav_by_id');
  late final _wire_set_is_fav_by_id =
      _wire_set_is_fav_by_idPtr.asFunction<void Function(int, int, int)>();

  void wire_get_current_wall_paper(
    int port_,
  ) {
    return _wire_get_current_wall_paper(
      port_,
    );
  }

  late final _wire_get_current_wall_paperPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_current_wall_paper');
  late final _wire_get_current_wall_paper =
      _wire_get_current_wall_paperPtr.asFunction<void Function(int)>();

  void wire_set_wall_paper(
    int port_,
    ffi.Pointer<wire_uint_8_list> s,
  ) {
    return _wire_set_wall_paper(
      port_,
      s,
    );
  }

  late final _wire_set_wall_paperPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_set_wall_paper');
  late final _wire_set_wall_paper = _wire_set_wall_paperPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_set_json_path(
    int port_,
    ffi.Pointer<wire_uint_8_list> s,
  ) {
    return _wire_set_json_path(
      port_,
      s,
    );
  }

  late final _wire_set_json_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_set_json_path');
  late final _wire_set_json_path = _wire_set_json_pathPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_set_db_path(
    int port_,
    ffi.Pointer<wire_uint_8_list> s,
  ) {
    return _wire_set_db_path(
      port_,
      s,
    );
  }

  late final _wire_set_db_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_set_db_path');
  late final _wire_set_db_path = _wire_set_db_pathPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_set_gallery_id(
    int port_,
    int id,
  ) {
    return _wire_set_gallery_id(
      port_,
      id,
    );
  }

  late final _wire_set_gallery_idPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int64)>>(
          'wire_set_gallery_id');
  late final _wire_set_gallery_id =
      _wire_set_gallery_idPtr.asFunction<void Function(int, int)>();

  void wire_create_new_gallery(
    int port_,
    ffi.Pointer<wire_uint_8_list> s,
  ) {
    return _wire_create_new_gallery(
      port_,
      s,
    );
  }

  late final _wire_create_new_galleryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_create_new_gallery');
  late final _wire_create_new_gallery = _wire_create_new_galleryPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_parent_id(
    int port_,
  ) {
    return _wire_get_parent_id(
      port_,
    );
  }

  late final _wire_get_parent_idPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_parent_id');
  late final _wire_get_parent_id =
      _wire_get_parent_idPtr.asFunction<void Function(int)>();

  void wire_delete_gallery_directly_by_id(
    int port_,
    int i,
  ) {
    return _wire_delete_gallery_directly_by_id(
      port_,
      i,
    );
  }

  late final _wire_delete_gallery_directly_by_idPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int64)>>(
          'wire_delete_gallery_directly_by_id');
  late final _wire_delete_gallery_directly_by_id =
      _wire_delete_gallery_directly_by_idPtr
          .asFunction<void Function(int, int)>();

  void wire_delete_gallery_keep_children_by_id(
    int port_,
    int i,
  ) {
    return _wire_delete_gallery_keep_children_by_id(
      port_,
      i,
    );
  }

  late final _wire_delete_gallery_keep_children_by_idPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int64)>>(
          'wire_delete_gallery_keep_children_by_id');
  late final _wire_delete_gallery_keep_children_by_id =
      _wire_delete_gallery_keep_children_by_idPtr
          .asFunction<void Function(int, int)>();

  void wire_download_file(
    int port_,
    ffi.Pointer<wire_uint_8_list> url,
    ffi.Pointer<wire_uint_8_list> save_path,
  ) {
    return _wire_download_file(
      port_,
      url,
      save_path,
    );
  }

  late final _wire_download_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_download_file');
  late final _wire_download_file = _wire_download_filePtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_children_by_id(
    int port_,
    int i,
  ) {
    return _wire_get_children_by_id(
      port_,
      i,
    );
  }

  late final _wire_get_children_by_idPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int64)>>(
          'wire_get_children_by_id');
  late final _wire_get_children_by_id =
      _wire_get_children_by_idPtr.asFunction<void Function(int, int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
typedef uintptr_t = ffi.UnsignedLongLong;
